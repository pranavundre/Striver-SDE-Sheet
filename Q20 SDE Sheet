class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int left, right, n = nums.size(), twosum = 0;
        vector<vector<int>> ret;
        for(int i = 0; i < n; i++){
            long long int rem1 = target - nums[i];
            for(int j = i+1; j < n; j++){
                long long int rem = rem1 - nums[j];
                left = j + 1;
                right = n - 1;
                while(left < right){
                    if(nums[left] + nums[right] > rem){
                        right--;
                    }else if(nums[left] + nums[right] < rem){
                        left++;
                    }else if(nums[left] + nums[right] == rem){
                        vector<int> temp(4, 0);
                        temp[0] = nums[i];
                        temp[1] = nums[j];
                        temp[2] = nums[left];
                        temp[3] = nums[right];
                        ret.emplace_back(temp);
                        while(left < right && nums[left] == temp[2]) ++left;
                        while(left < right && nums[right] == temp[3]) --right;
                    }
                }
                while(j+1 < n && nums[j] == nums[j+1]) ++j;
            }
            while(i+1 < n && nums[i]==nums[i+1]) ++i; 
        }
        return ret;
    }
};
